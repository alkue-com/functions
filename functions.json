[
  {
    "name": "calculator",
    "description": "Use calculator",
    "parameters": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "Expression"
        }
      },
      "required": [
        "expression"
      ]
    }
  },
  {
    "name": "execute_command",
    "description": "Execute the shell command.",
    "parameters": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "The command to execute."
        }
      },
      "required": [
        "command"
      ]
    }
  },
  {
    "name": "execute_py_code",
    "description": "Execute the python code.",
    "parameters": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Python code to execute, such as `print(\"hello world\")`"
        }
      },
      "required": [
        "code"
      ]
    }
  },
  {
    "name": "execute_js_code",
    "description": "Execute the javascript code in node.js.",
    "parameters": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Javascript code to execute, such as `console.log(\"hello world\")`"
        }
      },
      "required": [
        "code"
      ]
    }
  },
  {
    "name": "fetch_url_via_curl",
    "description": "Extract the content from a given URL.",
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to scrape."
        }
      },
      "required": [
        "url"
      ]
    }
  },
  {
    "name": "fetch_url_via_jina",
    "description": "Extract the content from a given URL.",
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to scrape."
        }
      },
      "required": [
        "url"
      ]
    }
  },
  {
    "name": "fs_cat",
    "description": "Read the contents of a file at the specified path.\nUse this when you need to examine the contents of an existing file.",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path of the file to read"
        }
      },
      "required": [
        "path"
      ]
    }
  },
  {
    "name": "fs_ls",
    "description": "List all files and directories at the specified path.",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path of the directory to list"
        }
      },
      "required": [
        "path"
      ]
    }
  },
  {
    "name": "fs_mkdir",
    "description": "Create a new directory at the specified path.",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path of the directory to create"
        }
      },
      "required": [
        "path"
      ]
    }
  },
  {
    "name": "fs_patch",
    "description": "Apply a patch to a file at the specified path.\nThis can be used to edit the file, without having to rewrite the whole file.",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path of the file to apply to"
        },
        "contents": {
          "type": "string",
          "description": "The patch to apply to the file\n\nHere is an example of a patch block that can be applied to modify the file to request the user's name:\n--- a/hello.py\n+++ b/hello.py\n@@ ... @@\n def hello():\n-    print(\"Hello World\")\n+    name = input(\"What is your name? \")\n+    print(f\"Hello {name}\")"
        }
      },
      "required": [
        "path",
        "contents"
      ]
    }
  },
  {
    "name": "fs_rm",
    "description": "Remove the file or directory at the specified path.",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path of the file or directory to remove"
        }
      },
      "required": [
        "path"
      ]
    }
  },
  {
    "name": "fs_write",
    "description": "Write the full file contents to a file at the specified path.",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path of the file to write to"
        },
        "contents": {
          "type": "string",
          "description": "The full contents to write to the file"
        }
      },
      "required": [
        "path",
        "contents"
      ]
    }
  },
  {
    "name": "get_current_time",
    "description": "Get the current time.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_current_weather",
    "description": "Get the current weather in a given location.",
    "parameters": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "The city and optionally the state or country, e.g., \"London\", \"San Francisco, CA\"."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "use_numbat",
    "description": "Perform computation",
    "parameters": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "Expression"
        }
      },
      "required": [
        "expression"
      ]
    }
  },
  {
    "name": "search_wikipedia",
    "description": "Search Wikipedia for a query.\nUses it to get detailed information about a public figure, interpretation of a complex scientific concept or in-depth connectivity of a significant historical event,.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The query to search for."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "web_search_tavily",
    "description": "Perform a web search using Tavily API to get up-to-date information or additional context.\nUse this when you need current information or feel a search could provide a better answer.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The query to search for."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "resolve_library_id",
    "description": "Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\n\nSelection Process:\n1. Analyze the query to understand what library/package the user is looking for\n2. Return the most relevant match based on:\n- Name similarity to the query (exact matches prioritized)\n- Description relevance to the query's intent\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\n- Trust score (consider libraries with scores of 7-10 more authoritative)\n\nResponse Format:\n- Return the selected library ID in a clearly marked section\n- Provide a brief explanation for why this library was chosen\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\n- If no good matches exist, clearly state this and suggest query refinements\n\nFor ambiguous queries, request clarification before proceeding with a best-guess match.",
    "parameters": {
      "type": "object",
      "properties": {
        "libraryName": {
          "type": "string",
          "description": "Library name to search for and retrieve a Context7-compatible library ID."
        }
      },
      "required": [
        "libraryName"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "mcp": "context7"
  },
  {
    "name": "get_library_docs",
    "description": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.",
    "parameters": {
      "type": "object",
      "properties": {
        "context7CompatibleLibraryID": {
          "type": "string",
          "description": "Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'."
        },
        "topic": {
          "type": "string",
          "description": "Topic to focus documentation on (e.g., 'hooks', 'routing')."
        },
        "tokens": {
          "type": "number",
          "description": "Maximum number of tokens of documentation to retrieve (default: 5000). Higher values provide more context but consume more tokens."
        }
      },
      "required": [
        "context7CompatibleLibraryID"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "mcp": "context7"
  },
  {
    "name": "search",
    "description": "\nSearch DuckDuckGo and return formatted results.\n\nArgs:\nquery: The search query string\nmax_results: Maximum number of results to return (default: 10)\nctx: MCP context for logging",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "title": "Query",
          "type": "string"
        },
        "max_results": {
          "default": 10,
          "title": "Max Results",
          "type": "integer"
        }
      },
      "required": [
        "query"
      ],
      "title": "searchArguments"
    },
    "mcp": "duckduckgo"
  },
  {
    "name": "fetch_content",
    "description": "\nFetch and parse content from a webpage URL.\n\nArgs:\nurl: The webpage URL to fetch content from\nctx: MCP context for logging",
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "title": "Url",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "title": "fetch_contentArguments"
    },
    "mcp": "duckduckgo"
  },
  {
    "name": "browser_navigate",
    "description": "Navigate to a URL in the browser",
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to navigate to"
        },
        "new_tab": {
          "type": "boolean",
          "description": "Whether to open in a new tab",
          "default": false
        }
      },
      "required": [
        "url"
      ]
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_click",
    "description": "Click an element on the page by its index",
    "parameters": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the link or element to click (from browser_get_state)"
        },
        "new_tab": {
          "type": "boolean",
          "description": "Whether to open any resulting navigation in a new tab",
          "default": false
        }
      },
      "required": [
        "index"
      ]
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_type",
    "description": "Type text into an input field",
    "parameters": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the input element (from browser_get_state)"
        },
        "text": {
          "type": "string",
          "description": "The text to type"
        }
      },
      "required": [
        "index",
        "text"
      ]
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_get_state",
    "description": "Get the current state of the page including all interactive elements",
    "parameters": {
      "type": "object",
      "properties": {
        "include_screenshot": {
          "type": "boolean",
          "description": "Whether to include a screenshot of the current page",
          "default": false
        }
      }
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_extract_content",
    "description": "Extract structured content from the current page based on a query",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "What information to extract from the page"
        },
        "extract_links": {
          "type": "boolean",
          "description": "Whether to include links in the extraction",
          "default": false
        }
      },
      "required": [
        "query"
      ]
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_scroll",
    "description": "Scroll the page",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "enum": [
            "up",
            "down"
          ],
          "description": "Direction to scroll",
          "default": "down"
        }
      }
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_go_back",
    "description": "Go back to the previous page",
    "parameters": {
      "type": "object",
      "properties": {}
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_list_tabs",
    "description": "List all open tabs",
    "parameters": {
      "type": "object",
      "properties": {}
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_switch_tab",
    "description": "Switch to a different tab",
    "parameters": {
      "type": "object",
      "properties": {
        "tab_id": {
          "type": "string",
          "description": "4 Character Tab ID of the tab to switch to"
        }
      },
      "required": [
        "tab_id"
      ]
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_close_tab",
    "description": "Close a tab",
    "parameters": {
      "type": "object",
      "properties": {
        "tab_id": {
          "type": "string",
          "description": "4 Character Tab ID of the tab to close"
        }
      },
      "required": [
        "tab_id"
      ]
    },
    "mcp": "browser-use"
  },
  {
    "name": "retry_with_browser_use_agent",
    "description": "Retry a task using the browser-use agent. Only use this as a last resort if you fail to interact with a page multiple times.",
    "parameters": {
      "type": "object",
      "properties": {
        "task": {
          "type": "string",
          "description": "The high-level goal and detailed step-by-step description of the task the AI browser agent needs to attempt, along with any relevant data needed to complete the task and info about previous attempts."
        },
        "max_steps": {
          "type": "integer",
          "description": "Maximum number of steps an agent can take.",
          "default": 100
        },
        "model": {
          "type": "string",
          "description": "LLM model to use (e.g., gpt-4o, claude-3-opus-20240229)",
          "default": "gpt-4o"
        },
        "allowed_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of domains the agent is allowed to visit (security feature)",
          "default": []
        },
        "use_vision": {
          "type": "boolean",
          "description": "Whether to use vision capabilities (screenshots) for the agent",
          "default": true
        }
      },
      "required": [
        "task"
      ]
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_list_sessions",
    "description": "List all active browser sessions with their details and last activity time",
    "parameters": {
      "type": "object",
      "properties": {}
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_close_session",
    "description": "Close a specific browser session by its ID",
    "parameters": {
      "type": "object",
      "properties": {
        "session_id": {
          "type": "string",
          "description": "The browser session ID to close (get from browser_list_sessions)"
        }
      },
      "required": [
        "session_id"
      ]
    },
    "mcp": "browser-use"
  },
  {
    "name": "browser_close_all",
    "description": "Close all active browser sessions and clean up resources",
    "parameters": {
      "type": "object",
      "properties": {}
    },
    "mcp": "browser-use"
  },
  {
    "name": "tavily_search",
    "description": "A powerful web search tool that provides comprehensive, real-time results using Tavily's AI search engine. Returns relevant web content with customizable parameters for result count, content type, and domain filtering. Ideal for gathering current information, news, and detailed web content analysis.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Search query"
        },
        "search_depth": {
          "type": "string",
          "enum": [
            "basic",
            "advanced"
          ],
          "description": "The depth of the search. It can be 'basic' or 'advanced'",
          "default": "basic"
        },
        "topic": {
          "type": "string",
          "enum": [
            "general",
            "news"
          ],
          "description": "The category of the search. This will determine which of our agents will be used for the search",
          "default": "general"
        },
        "days": {
          "type": "number",
          "description": "The number of days back from the current date to include in the search results. This specifies the time frame of data to be retrieved. Please note that this feature is only available when using the 'news' search topic",
          "default": 3
        },
        "time_range": {
          "type": "string",
          "description": "The time range back from the current date to include in the search results. This feature is available for both 'general' and 'news' search topics",
          "enum": [
            "day",
            "week",
            "month",
            "year",
            "d",
            "w",
            "m",
            "y"
          ]
        },
        "start_date": {
          "type": "string",
          "description": "Will return all results after the specified start date. Required to be written in the format YYYY-MM-DD.",
          "default": ""
        },
        "end_date": {
          "type": "string",
          "description": "Will return all results before the specified end date. Required to be written in the format YYYY-MM-DD",
          "default": ""
        },
        "max_results": {
          "type": "number",
          "description": "The maximum number of search results to return",
          "default": 10,
          "minimum": 5,
          "maximum": 20
        },
        "include_images": {
          "type": "boolean",
          "description": "Include a list of query-related images in the response",
          "default": false
        },
        "include_image_descriptions": {
          "type": "boolean",
          "description": "Include a list of query-related images and their descriptions in the response",
          "default": false
        },
        "include_raw_content": {
          "type": "boolean",
          "description": "Include the cleaned and parsed HTML content of each search result",
          "default": false
        },
        "include_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of domains to specifically include in the search results, if the user asks to search on specific sites set this to the domain of the site",
          "default": []
        },
        "exclude_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of domains to specifically exclude, if the user asks to exclude a domain set this to the domain of the site",
          "default": []
        },
        "country": {
          "type": "string",
          "enum": [
            "afghanistan",
            "albania",
            "algeria",
            "andorra",
            "angola",
            "argentina",
            "armenia",
            "australia",
            "austria",
            "azerbaijan",
            "bahamas",
            "bahrain",
            "bangladesh",
            "barbados",
            "belarus",
            "belgium",
            "belize",
            "benin",
            "bhutan",
            "bolivia",
            "bosnia and herzegovina",
            "botswana",
            "brazil",
            "brunei",
            "bulgaria",
            "burkina faso",
            "burundi",
            "cambodia",
            "cameroon",
            "canada",
            "cape verde",
            "central african republic",
            "chad",
            "chile",
            "china",
            "colombia",
            "comoros",
            "congo",
            "costa rica",
            "croatia",
            "cuba",
            "cyprus",
            "czech republic",
            "denmark",
            "djibouti",
            "dominican republic",
            "ecuador",
            "egypt",
            "el salvador",
            "equatorial guinea",
            "eritrea",
            "estonia",
            "ethiopia",
            "fiji",
            "finland",
            "france",
            "gabon",
            "gambia",
            "georgia",
            "germany",
            "ghana",
            "greece",
            "guatemala",
            "guinea",
            "haiti",
            "honduras",
            "hungary",
            "iceland",
            "india",
            "indonesia",
            "iran",
            "iraq",
            "ireland",
            "israel",
            "italy",
            "jamaica",
            "japan",
            "jordan",
            "kazakhstan",
            "kenya",
            "kuwait",
            "kyrgyzstan",
            "latvia",
            "lebanon",
            "lesotho",
            "liberia",
            "libya",
            "liechtenstein",
            "lithuania",
            "luxembourg",
            "madagascar",
            "malawi",
            "malaysia",
            "maldives",
            "mali",
            "malta",
            "mauritania",
            "mauritius",
            "mexico",
            "moldova",
            "monaco",
            "mongolia",
            "montenegro",
            "morocco",
            "mozambique",
            "myanmar",
            "namibia",
            "nepal",
            "netherlands",
            "new zealand",
            "nicaragua",
            "niger",
            "nigeria",
            "north korea",
            "north macedonia",
            "norway",
            "oman",
            "pakistan",
            "panama",
            "papua new guinea",
            "paraguay",
            "peru",
            "philippines",
            "poland",
            "portugal",
            "qatar",
            "romania",
            "russia",
            "rwanda",
            "saudi arabia",
            "senegal",
            "serbia",
            "singapore",
            "slovakia",
            "slovenia",
            "somalia",
            "south africa",
            "south korea",
            "south sudan",
            "spain",
            "sri lanka",
            "sudan",
            "sweden",
            "switzerland",
            "syria",
            "taiwan",
            "tajikistan",
            "tanzania",
            "thailand",
            "togo",
            "trinidad and tobago",
            "tunisia",
            "turkey",
            "turkmenistan",
            "uganda",
            "ukraine",
            "united arab emirates",
            "united kingdom",
            "united states",
            "uruguay",
            "uzbekistan",
            "venezuela",
            "vietnam",
            "yemen",
            "zambia",
            "zimbabwe"
          ],
          "description": "Boost search results from a specific country. This will prioritize content from the selected country in the search results. Available only if topic is general. Country names MUST be written in lowercase, plain English, with spaces and no underscores.",
          "default": ""
        },
        "include_favicon": {
          "type": "boolean",
          "description": "Whether to include the favicon URL for each result",
          "default": false
        }
      },
      "required": [
        "query"
      ]
    },
    "mcp": "tavily"
  },
  {
    "name": "tavily_extract",
    "description": "A powerful web content extraction tool that retrieves and processes raw content from specified URLs, ideal for data collection, content analysis, and research tasks.",
    "parameters": {
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of URLs to extract content from"
        },
        "extract_depth": {
          "type": "string",
          "enum": [
            "basic",
            "advanced"
          ],
          "description": "Depth of extraction - 'basic' or 'advanced', if usrls are linkedin use 'advanced' or if explicitly told to use advanced",
          "default": "basic"
        },
        "include_images": {
          "type": "boolean",
          "description": "Include a list of images extracted from the urls in the response",
          "default": false
        },
        "format": {
          "type": "string",
          "enum": [
            "markdown",
            "text"
          ],
          "description": "The format of the extracted web page content. markdown returns content in markdown format. text returns plain text and may increase latency.",
          "default": "markdown"
        },
        "include_favicon": {
          "type": "boolean",
          "description": "Whether to include the favicon URL for each result",
          "default": false
        }
      },
      "required": [
        "urls"
      ]
    },
    "mcp": "tavily"
  },
  {
    "name": "tavily_crawl",
    "description": "A powerful web crawler that initiates a structured web crawl starting from a specified base URL. The crawler expands from that point like a tree, following internal links across pages. You can control how deep and wide it goes, and guide it to focus on specific sections of the site.",
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The root URL to begin the crawl"
        },
        "max_depth": {
          "type": "integer",
          "description": "Max depth of the crawl. Defines how far from the base URL the crawler can explore.",
          "default": 1,
          "minimum": 1
        },
        "max_breadth": {
          "type": "integer",
          "description": "Max number of links to follow per level of the tree (i.e., per page)",
          "default": 20,
          "minimum": 1
        },
        "limit": {
          "type": "integer",
          "description": "Total number of links the crawler will process before stopping",
          "default": 50,
          "minimum": 1
        },
        "instructions": {
          "type": "string",
          "description": "Natural language instructions for the crawler"
        },
        "select_paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Regex patterns to select only URLs with specific path patterns (e.g., /docs/.*, /api/v1.*)",
          "default": []
        },
        "select_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Regex patterns to select crawling to specific domains or subdomains (e.g., ^docs\\.example\\.com$)",
          "default": []
        },
        "allow_external": {
          "type": "boolean",
          "description": "Whether to allow following links that go to external domains",
          "default": false
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Careers",
              "Blog",
              "Documentation",
              "About",
              "Pricing",
              "Community",
              "Developers",
              "Contact",
              "Media"
            ]
          },
          "description": "Filter URLs using predefined categories like documentation, blog, api, etc",
          "default": []
        },
        "extract_depth": {
          "type": "string",
          "enum": [
            "basic",
            "advanced"
          ],
          "description": "Advanced extraction retrieves more data, including tables and embedded content, with higher success but may increase latency",
          "default": "basic"
        },
        "format": {
          "type": "string",
          "enum": [
            "markdown",
            "text"
          ],
          "description": "The format of the extracted web page content. markdown returns content in markdown format. text returns plain text and may increase latency.",
          "default": "markdown"
        },
        "include_favicon": {
          "type": "boolean",
          "description": "Whether to include the favicon URL for each result",
          "default": false
        }
      },
      "required": [
        "url"
      ]
    },
    "mcp": "tavily"
  },
  {
    "name": "tavily_map",
    "description": "A powerful web mapping tool that creates a structured map of website URLs, allowing you to discover and analyze site structure, content organization, and navigation paths. Perfect for site audits, content discovery, and understanding website architecture.",
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The root URL to begin the mapping"
        },
        "max_depth": {
          "type": "integer",
          "description": "Max depth of the mapping. Defines how far from the base URL the crawler can explore",
          "default": 1,
          "minimum": 1
        },
        "max_breadth": {
          "type": "integer",
          "description": "Max number of links to follow per level of the tree (i.e., per page)",
          "default": 20,
          "minimum": 1
        },
        "limit": {
          "type": "integer",
          "description": "Total number of links the crawler will process before stopping",
          "default": 50,
          "minimum": 1
        },
        "instructions": {
          "type": "string",
          "description": "Natural language instructions for the crawler"
        },
        "select_paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Regex patterns to select only URLs with specific path patterns (e.g., /docs/.*, /api/v1.*)",
          "default": []
        },
        "select_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Regex patterns to select crawling to specific domains or subdomains (e.g., ^docs\\.example\\.com$)",
          "default": []
        },
        "allow_external": {
          "type": "boolean",
          "description": "Whether to allow following links that go to external domains",
          "default": false
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Careers",
              "Blog",
              "Documentation",
              "About",
              "Pricing",
              "Community",
              "Developers",
              "Contact",
              "Media"
            ]
          },
          "description": "Filter URLs using predefined categories like documentation, blog, api, etc",
          "default": []
        }
      },
      "required": [
        "url"
      ]
    },
    "mcp": "tavily"
  }
]